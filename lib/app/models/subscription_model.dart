///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class SubscriptionStripeSubscriptionObjTrialSettingsEndBehavior {
/*
{
  "missing_payment_method": "create_invoice"
}
*/

  String? missingPaymentMethod;

  SubscriptionStripeSubscriptionObjTrialSettingsEndBehavior({
    this.missingPaymentMethod,
  });
  SubscriptionStripeSubscriptionObjTrialSettingsEndBehavior.fromJson(Map<String, dynamic> json) {
    missingPaymentMethod = json['missing_payment_method']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['missing_payment_method'] = missingPaymentMethod;
    return data;
  }
}

class SubscriptionStripeSubscriptionObjTrialSettings {
/*
{
  "end_behavior": {
    "missing_payment_method": "create_invoice"
  }
}
*/

  SubscriptionStripeSubscriptionObjTrialSettingsEndBehavior? endBehavior;

  SubscriptionStripeSubscriptionObjTrialSettings({
    this.endBehavior,
  });
  SubscriptionStripeSubscriptionObjTrialSettings.fromJson(Map<String, dynamic> json) {
    endBehavior = (json['end_behavior'] != null) ? SubscriptionStripeSubscriptionObjTrialSettingsEndBehavior.fromJson(json['end_behavior']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (endBehavior != null) {
      data['end_behavior'] = endBehavior!.toJson();
    }
    return data;
  }
}

class SubscriptionStripeSubscriptionObjPlan {
/*
{
  "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
  "object": "plan",
  "active": true,
  "aggregate_usage": null,
  "amount": 1000,
  "amount_decimal": "1000",
  "billing_scheme": "per_unit",
  "created": 1722997483,
  "currency": "usd",
  "interval": "month",
  "interval_count": 1,
  "livemode": false,
  "meter": null,
  "nickname": null,
  "product": "prod_QcE0CIBE3m3JgJ",
  "tiers_mode": null,
  "transform_usage": null,
  "trial_period_days": null,
  "usage_type": "licensed"
}
*/

  String? id;
  String? object;
  bool? active;
  String? aggregateUsage;
  int? amount;
  String? amountDecimal;
  String? billingScheme;
  int? created;
  String? currency;
  String? interval;
  int? intervalCount;
  bool? livemode;
  String? meter;
  String? nickname;
  String? product;
  String? tiersMode;
  String? transformUsage;
  String? trialPeriodDays;
  String? usageType;

  SubscriptionStripeSubscriptionObjPlan({
    this.id,
    this.object,
    this.active,
    this.aggregateUsage,
    this.amount,
    this.amountDecimal,
    this.billingScheme,
    this.created,
    this.currency,
    this.interval,
    this.intervalCount,
    this.livemode,
    this.meter,
    this.nickname,
    this.product,
    this.tiersMode,
    this.transformUsage,
    this.trialPeriodDays,
    this.usageType,
  });
  SubscriptionStripeSubscriptionObjPlan.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    object = json['object']?.toString();
    active = json['active'];
    aggregateUsage = json['aggregate_usage']?.toString();
    amount = json['amount']?.toInt();
    amountDecimal = json['amount_decimal']?.toString();
    billingScheme = json['billing_scheme']?.toString();
    created = json['created']?.toInt();
    currency = json['currency']?.toString();
    interval = json['interval']?.toString();
    intervalCount = json['interval_count']?.toInt();
    livemode = json['livemode'];
    meter = json['meter']?.toString();
    nickname = json['nickname']?.toString();
    product = json['product']?.toString();
    tiersMode = json['tiers_mode']?.toString();
    transformUsage = json['transform_usage']?.toString();
    trialPeriodDays = json['trial_period_days']?.toString();
    usageType = json['usage_type']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['object'] = object;
    data['active'] = active;
    data['aggregate_usage'] = aggregateUsage;
    data['amount'] = amount;
    data['amount_decimal'] = amountDecimal;
    data['billing_scheme'] = billingScheme;
    data['created'] = created;
    data['currency'] = currency;
    data['interval'] = interval;
    data['interval_count'] = intervalCount;
    data['livemode'] = livemode;
    data['meter'] = meter;
    data['nickname'] = nickname;
    data['product'] = product;
    data['tiers_mode'] = tiersMode;
    data['transform_usage'] = transformUsage;
    data['trial_period_days'] = trialPeriodDays;
    data['usage_type'] = usageType;
    return data;
  }
}

class SubscriptionStripeSubscriptionObjPaymentSettings {
/*
{
  "payment_method_options": null,
  "payment_method_types": null,
  "save_default_payment_method": "off"
}
*/

  String? paymentMethodOptions;
  String? paymentMethodTypes;
  String? saveDefaultPaymentMethod;

  SubscriptionStripeSubscriptionObjPaymentSettings({
    this.paymentMethodOptions,
    this.paymentMethodTypes,
    this.saveDefaultPaymentMethod,
  });
  SubscriptionStripeSubscriptionObjPaymentSettings.fromJson(Map<String, dynamic> json) {
    paymentMethodOptions = json['payment_method_options']?.toString();
    paymentMethodTypes = json['payment_method_types']?.toString();
    saveDefaultPaymentMethod = json['save_default_payment_method']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['payment_method_options'] = paymentMethodOptions;
    data['payment_method_types'] = paymentMethodTypes;
    data['save_default_payment_method'] = saveDefaultPaymentMethod;
    return data;
  }
}

class SubscriptionStripeSubscriptionObjItemsDataPriceRecurring {
/*
{
  "aggregate_usage": null,
  "interval": "month",
  "interval_count": 1,
  "meter": null,
  "trial_period_days": null,
  "usage_type": "licensed"
}
*/

  String? aggregateUsage;
  String? interval;
  int? intervalCount;
  String? meter;
  String? trialPeriodDays;
  String? usageType;

  SubscriptionStripeSubscriptionObjItemsDataPriceRecurring({
    this.aggregateUsage,
    this.interval,
    this.intervalCount,
    this.meter,
    this.trialPeriodDays,
    this.usageType,
  });
  SubscriptionStripeSubscriptionObjItemsDataPriceRecurring.fromJson(Map<String, dynamic> json) {
    aggregateUsage = json['aggregate_usage']?.toString();
    interval = json['interval']?.toString();
    intervalCount = json['interval_count']?.toInt();
    meter = json['meter']?.toString();
    trialPeriodDays = json['trial_period_days']?.toString();
    usageType = json['usage_type']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['aggregate_usage'] = aggregateUsage;
    data['interval'] = interval;
    data['interval_count'] = intervalCount;
    data['meter'] = meter;
    data['trial_period_days'] = trialPeriodDays;
    data['usage_type'] = usageType;
    return data;
  }
}

class SubscriptionStripeSubscriptionObjItemsDataPrice {
/*
{
  "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
  "object": "price",
  "active": true,
  "billing_scheme": "per_unit",
  "created": 1722997483,
  "currency": "usd",
  "custom_unit_amount": null,
  "livemode": false,
  "lookup_key": null,
  "nickname": null,
  "product": "prod_QcE0CIBE3m3JgJ",
  "recurring": {
    "aggregate_usage": null,
    "interval": "month",
    "interval_count": 1,
    "meter": null,
    "trial_period_days": null,
    "usage_type": "licensed"
  },
  "tax_behavior": "unspecified",
  "tiers_mode": null,
  "transform_quantity": null,
  "type": "recurring",
  "unit_amount": 1000,
  "unit_amount_decimal": "1000"
}
*/

  String? id;
  String? object;
  bool? active;
  String? billingScheme;
  int? created;
  String? currency;
  String? customUnitAmount;
  bool? livemode;
  String? lookupKey;
  String? nickname;
  String? product;
  SubscriptionStripeSubscriptionObjItemsDataPriceRecurring? recurring;
  String? taxBehavior;
  String? tiersMode;
  String? transformQuantity;
  String? type;
  int? unitAmount;
  String? unitAmountDecimal;

  SubscriptionStripeSubscriptionObjItemsDataPrice({
    this.id,
    this.object,
    this.active,
    this.billingScheme,
    this.created,
    this.currency,
    this.customUnitAmount,
    this.livemode,
    this.lookupKey,
    this.nickname,
    this.product,
    this.recurring,
    this.taxBehavior,
    this.tiersMode,
    this.transformQuantity,
    this.type,
    this.unitAmount,
    this.unitAmountDecimal,
  });
  SubscriptionStripeSubscriptionObjItemsDataPrice.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    object = json['object']?.toString();
    active = json['active'];
    billingScheme = json['billing_scheme']?.toString();
    created = json['created']?.toInt();
    currency = json['currency']?.toString();
    customUnitAmount = json['custom_unit_amount']?.toString();
    livemode = json['livemode'];
    lookupKey = json['lookup_key']?.toString();
    nickname = json['nickname']?.toString();
    product = json['product']?.toString();
    recurring = (json['recurring'] != null) ? SubscriptionStripeSubscriptionObjItemsDataPriceRecurring.fromJson(json['recurring']) : null;
    taxBehavior = json['tax_behavior']?.toString();
    tiersMode = json['tiers_mode']?.toString();
    transformQuantity = json['transform_quantity']?.toString();
    type = json['type']?.toString();
    unitAmount = json['unit_amount']?.toInt();
    unitAmountDecimal = json['unit_amount_decimal']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['object'] = object;
    data['active'] = active;
    data['billing_scheme'] = billingScheme;
    data['created'] = created;
    data['currency'] = currency;
    data['custom_unit_amount'] = customUnitAmount;
    data['livemode'] = livemode;
    data['lookup_key'] = lookupKey;
    data['nickname'] = nickname;
    data['product'] = product;
    if (recurring != null) {
      data['recurring'] = recurring!.toJson();
    }
    data['tax_behavior'] = taxBehavior;
    data['tiers_mode'] = tiersMode;
    data['transform_quantity'] = transformQuantity;
    data['type'] = type;
    data['unit_amount'] = unitAmount;
    data['unit_amount_decimal'] = unitAmountDecimal;
    return data;
  }
}

class SubscriptionStripeSubscriptionObjItemsDataPlan {
/*
{
  "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
  "object": "plan",
  "active": true,
  "aggregate_usage": null,
  "amount": 1000,
  "amount_decimal": "1000",
  "billing_scheme": "per_unit",
  "created": 1722997483,
  "currency": "usd",
  "interval": "month",
  "interval_count": 1,
  "livemode": false,
  "meter": null,
  "nickname": null,
  "product": "prod_QcE0CIBE3m3JgJ",
  "tiers_mode": null,
  "transform_usage": null,
  "trial_period_days": null,
  "usage_type": "licensed"
}
*/

  String? id;
  String? object;
  bool? active;
  String? aggregateUsage;
  int? amount;
  String? amountDecimal;
  String? billingScheme;
  int? created;
  String? currency;
  String? interval;
  int? intervalCount;
  bool? livemode;
  String? meter;
  String? nickname;
  String? product;
  String? tiersMode;
  String? transformUsage;
  String? trialPeriodDays;
  String? usageType;

  SubscriptionStripeSubscriptionObjItemsDataPlan({
    this.id,
    this.object,
    this.active,
    this.aggregateUsage,
    this.amount,
    this.amountDecimal,
    this.billingScheme,
    this.created,
    this.currency,
    this.interval,
    this.intervalCount,
    this.livemode,
    this.meter,
    this.nickname,
    this.product,
    this.tiersMode,
    this.transformUsage,
    this.trialPeriodDays,
    this.usageType,
  });
  SubscriptionStripeSubscriptionObjItemsDataPlan.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    object = json['object']?.toString();
    active = json['active'];
    aggregateUsage = json['aggregate_usage']?.toString();
    amount = json['amount']?.toInt();
    amountDecimal = json['amount_decimal']?.toString();
    billingScheme = json['billing_scheme']?.toString();
    created = json['created']?.toInt();
    currency = json['currency']?.toString();
    interval = json['interval']?.toString();
    intervalCount = json['interval_count']?.toInt();
    livemode = json['livemode'];
    meter = json['meter']?.toString();
    nickname = json['nickname']?.toString();
    product = json['product']?.toString();
    tiersMode = json['tiers_mode']?.toString();
    transformUsage = json['transform_usage']?.toString();
    trialPeriodDays = json['trial_period_days']?.toString();
    usageType = json['usage_type']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['object'] = object;
    data['active'] = active;
    data['aggregate_usage'] = aggregateUsage;
    data['amount'] = amount;
    data['amount_decimal'] = amountDecimal;
    data['billing_scheme'] = billingScheme;
    data['created'] = created;
    data['currency'] = currency;
    data['interval'] = interval;
    data['interval_count'] = intervalCount;
    data['livemode'] = livemode;
    data['meter'] = meter;
    data['nickname'] = nickname;
    data['product'] = product;
    data['tiers_mode'] = tiersMode;
    data['transform_usage'] = transformUsage;
    data['trial_period_days'] = trialPeriodDays;
    data['usage_type'] = usageType;
    return data;
  }
}

class SubscriptionStripeSubscriptionObjItemsData {
/*
{
  "id": "si_QhF8uBNsPWK6iN",
  "object": "subscription_item",
  "billing_thresholds": null,
  "created": 1724154896,
  "discounts": [
    null
  ],
  "plan": {
    "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
    "object": "plan",
    "active": true,
    "aggregate_usage": null,
    "amount": 1000,
    "amount_decimal": "1000",
    "billing_scheme": "per_unit",
    "created": 1722997483,
    "currency": "usd",
    "interval": "month",
    "interval_count": 1,
    "livemode": false,
    "meter": null,
    "nickname": null,
    "product": "prod_QcE0CIBE3m3JgJ",
    "tiers_mode": null,
    "transform_usage": null,
    "trial_period_days": null,
    "usage_type": "licensed"
  },
  "price": {
    "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
    "object": "price",
    "active": true,
    "billing_scheme": "per_unit",
    "created": 1722997483,
    "currency": "usd",
    "custom_unit_amount": null,
    "livemode": false,
    "lookup_key": null,
    "nickname": null,
    "product": "prod_QcE0CIBE3m3JgJ",
    "recurring": {
      "aggregate_usage": null,
      "interval": "month",
      "interval_count": 1,
      "meter": null,
      "trial_period_days": null,
      "usage_type": "licensed"
    },
    "tax_behavior": "unspecified",
    "tiers_mode": null,
    "transform_quantity": null,
    "type": "recurring",
    "unit_amount": 1000,
    "unit_amount_decimal": "1000"
  },
  "quantity": 1,
  "subscription": "sub_1PpqeJKlUbZkAAt6XyRGwdzT",
  "tax_rates": [
    null
  ]
}
*/

  String? id;
  String? object;
  String? billingThresholds;
  int? created;
  List<dynamic>? discounts;
  SubscriptionStripeSubscriptionObjItemsDataPlan? plan;
  SubscriptionStripeSubscriptionObjItemsDataPrice? price;
  int? quantity;
  String? subscription;
  List<dynamic>? taxRates;

  SubscriptionStripeSubscriptionObjItemsData({
    this.id,
    this.object,
    this.billingThresholds,
    this.created,
    this.discounts,
    this.plan,
    this.price,
    this.quantity,
    this.subscription,
    this.taxRates,
  });
  SubscriptionStripeSubscriptionObjItemsData.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    object = json['object']?.toString();
    billingThresholds = json['billing_thresholds']?.toString();
    created = json['created']?.toInt();
    plan = (json['plan'] != null) ? SubscriptionStripeSubscriptionObjItemsDataPlan.fromJson(json['plan']) : null;
    price = (json['price'] != null) ? SubscriptionStripeSubscriptionObjItemsDataPrice.fromJson(json['price']) : null;
    quantity = json['quantity']?.toInt();
    subscription = json['subscription']?.toString();
    }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['object'] = object;
    data['billing_thresholds'] = billingThresholds;
    data['created'] = created;

    if (plan != null) {
    data['plan'] = plan!.toJson();
    }
    if (price != null) {
    data['price'] = price!.toJson();
    }
    data['quantity'] = quantity;
    data['subscription'] = subscription;
    return data;
  }
}

class SubscriptionStripeSubscriptionObjItems {
/*
{
  "object": "list",
  "data": [
    {
      "id": "si_QhF8uBNsPWK6iN",
      "object": "subscription_item",
      "billing_thresholds": null,
      "created": 1724154896,
      "discounts": [
        null
      ],
      "plan": {
        "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
        "object": "plan",
        "active": true,
        "aggregate_usage": null,
        "amount": 1000,
        "amount_decimal": "1000",
        "billing_scheme": "per_unit",
        "created": 1722997483,
        "currency": "usd",
        "interval": "month",
        "interval_count": 1,
        "livemode": false,
        "meter": null,
        "nickname": null,
        "product": "prod_QcE0CIBE3m3JgJ",
        "tiers_mode": null,
        "transform_usage": null,
        "trial_period_days": null,
        "usage_type": "licensed"
      },
      "price": {
        "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
        "object": "price",
        "active": true,
        "billing_scheme": "per_unit",
        "created": 1722997483,
        "currency": "usd",
        "custom_unit_amount": null,
        "livemode": false,
        "lookup_key": null,
        "nickname": null,
        "product": "prod_QcE0CIBE3m3JgJ",
        "recurring": {
          "aggregate_usage": null,
          "interval": "month",
          "interval_count": 1,
          "meter": null,
          "trial_period_days": null,
          "usage_type": "licensed"
        },
        "tax_behavior": "unspecified",
        "tiers_mode": null,
        "transform_quantity": null,
        "type": "recurring",
        "unit_amount": 1000,
        "unit_amount_decimal": "1000"
      },
      "quantity": 1,
      "subscription": "sub_1PpqeJKlUbZkAAt6XyRGwdzT",
      "tax_rates": [
        null
      ]
    }
  ],
  "has_more": false,
  "total_count": 1,
  "url": "/v1/subscription_items?subscription=sub_1PpqeJKlUbZkAAt6XyRGwdzT"
}
*/

  String? object;
  List<SubscriptionStripeSubscriptionObjItemsData?>? data;
  bool? hasMore;
  int? totalCount;
  String? url;

  SubscriptionStripeSubscriptionObjItems({
    this.object,
    this.data,
    this.hasMore,
    this.totalCount,
    this.url,
  });
  SubscriptionStripeSubscriptionObjItems.fromJson(Map<String, dynamic> json) {
    object = json['object']?.toString();
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <SubscriptionStripeSubscriptionObjItemsData>[];
      v.forEach((v) {
        arr0.add(SubscriptionStripeSubscriptionObjItemsData.fromJson(v));
      });
      this.data = arr0;
    }
    hasMore = json['has_more'];
    totalCount = json['total_count']?.toInt();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['object'] = object;
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['data'] = arr0;
    }
    data['has_more'] = hasMore;
    data['total_count'] = totalCount;
    data['url'] = url;
    return data;
  }
}

class SubscriptionStripeSubscriptionObjInvoiceSettingsIssuer {
/*
{
  "type": "self"
}
*/

  String? type;

  SubscriptionStripeSubscriptionObjInvoiceSettingsIssuer({
    this.type,
  });
  SubscriptionStripeSubscriptionObjInvoiceSettingsIssuer.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    return data;
  }
}

class SubscriptionStripeSubscriptionObjInvoiceSettings {
/*
{
  "account_tax_ids": null,
  "issuer": {
    "type": "self"
  }
}
*/

  String? accountTaxIds;
  SubscriptionStripeSubscriptionObjInvoiceSettingsIssuer? issuer;

  SubscriptionStripeSubscriptionObjInvoiceSettings({
    this.accountTaxIds,
    this.issuer,
  });
  SubscriptionStripeSubscriptionObjInvoiceSettings.fromJson(Map<String, dynamic> json) {
    accountTaxIds = json['account_tax_ids']?.toString();
    issuer = (json['issuer'] != null) ? SubscriptionStripeSubscriptionObjInvoiceSettingsIssuer.fromJson(json['issuer']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['account_tax_ids'] = accountTaxIds;
    if (issuer != null) {
      data['issuer'] = issuer!.toJson();
    }
    return data;
  }
}

class SubscriptionStripeSubscriptionObjCancellationDetails {
/*
{
  "comment": null,
  "feedback": null,
  "reason": null
}
*/

  String? comment;
  String? feedback;
  String? reason;

  SubscriptionStripeSubscriptionObjCancellationDetails({
    this.comment,
    this.feedback,
    this.reason,
  });
  SubscriptionStripeSubscriptionObjCancellationDetails.fromJson(Map<String, dynamic> json) {
    comment = json['comment']?.toString();
    feedback = json['feedback']?.toString();
    reason = json['reason']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['comment'] = comment;
    data['feedback'] = feedback;
    data['reason'] = reason;
    return data;
  }
}

class SubscriptionStripeSubscriptionObjAutomaticTax {
/*
{
  "enabled": false,
  "liability": null
}
*/

  bool? enabled;
  String? liability;

  SubscriptionStripeSubscriptionObjAutomaticTax({
    this.enabled,
    this.liability,
  });
  SubscriptionStripeSubscriptionObjAutomaticTax.fromJson(Map<String, dynamic> json) {
    enabled = json['enabled'];
    liability = json['liability']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['enabled'] = enabled;
    data['liability'] = liability;
    return data;
  }
}

class SubscriptionStripeSubscriptionObj {
/*
{
  "id": "sub_1PpqeJKlUbZkAAt6XyRGwdzT",
  "object": "subscription",
  "application": null,
  "application_fee_percent": null,
  "automatic_tax": {
    "enabled": false,
    "liability": null
  },
  "billing_cycle_anchor": 1724154895,
  "billing_cycle_anchor_config": null,
  "billing_thresholds": null,
  "cancel_at": null,
  "cancel_at_period_end": false,
  "canceled_at": null,
  "cancellation_details": {
    "comment": null,
    "feedback": null,
    "reason": null
  },
  "collection_method": "charge_automatically",
  "created": 1724154895,
  "currency": "usd",
  "current_period_end": 1726833295,
  "current_period_start": 1724154895,
  "customer": "cus_QhEzxdafS8BO6e",
  "days_until_due": null,
  "default_payment_method": "card_1PpqXLKlUbZkAAt6nCCBCo5X",
  "default_source": null,
  "default_tax_rates": [
    null
  ],
  "description": null,
  "discount": null,
  "discounts": [
    null
  ],
  "ended_at": null,
  "invoice_settings": {
    "account_tax_ids": null,
    "issuer": {
      "type": "self"
    }
  },
  "items": {
    "object": "list",
    "data": [
      {
        "id": "si_QhF8uBNsPWK6iN",
        "object": "subscription_item",
        "billing_thresholds": null,
        "created": 1724154896,
        "discounts": [
          null
        ],
        "plan": {
          "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
          "object": "plan",
          "active": true,
          "aggregate_usage": null,
          "amount": 1000,
          "amount_decimal": "1000",
          "billing_scheme": "per_unit",
          "created": 1722997483,
          "currency": "usd",
          "interval": "month",
          "interval_count": 1,
          "livemode": false,
          "meter": null,
          "nickname": null,
          "product": "prod_QcE0CIBE3m3JgJ",
          "tiers_mode": null,
          "transform_usage": null,
          "trial_period_days": null,
          "usage_type": "licensed"
        },
        "price": {
          "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
          "object": "price",
          "active": true,
          "billing_scheme": "per_unit",
          "created": 1722997483,
          "currency": "usd",
          "custom_unit_amount": null,
          "livemode": false,
          "lookup_key": null,
          "nickname": null,
          "product": "prod_QcE0CIBE3m3JgJ",
          "recurring": {
            "aggregate_usage": null,
            "interval": "month",
            "interval_count": 1,
            "meter": null,
            "trial_period_days": null,
            "usage_type": "licensed"
          },
          "tax_behavior": "unspecified",
          "tiers_mode": null,
          "transform_quantity": null,
          "type": "recurring",
          "unit_amount": 1000,
          "unit_amount_decimal": "1000"
        },
        "quantity": 1,
        "subscription": "sub_1PpqeJKlUbZkAAt6XyRGwdzT",
        "tax_rates": [
          null
        ]
      }
    ],
    "has_more": false,
    "total_count": 1,
    "url": "/v1/subscription_items?subscription=sub_1PpqeJKlUbZkAAt6XyRGwdzT"
  },
  "latest_invoice": "in_1PpqeJKlUbZkAAt6SmgOEPgH",
  "livemode": false,
  "next_pending_invoice_item_invoice": null,
  "on_behalf_of": null,
  "pause_collection": null,
  "payment_settings": {
    "payment_method_options": null,
    "payment_method_types": null,
    "save_default_payment_method": "off"
  },
  "pending_invoice_item_interval": null,
  "pending_setup_intent": null,
  "pending_update": null,
  "plan": {
    "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
    "object": "plan",
    "active": true,
    "aggregate_usage": null,
    "amount": 1000,
    "amount_decimal": "1000",
    "billing_scheme": "per_unit",
    "created": 1722997483,
    "currency": "usd",
    "interval": "month",
    "interval_count": 1,
    "livemode": false,
    "meter": null,
    "nickname": null,
    "product": "prod_QcE0CIBE3m3JgJ",
    "tiers_mode": null,
    "transform_usage": null,
    "trial_period_days": null,
    "usage_type": "licensed"
  },
  "quantity": 1,
  "schedule": null,
  "start_date": 1724154895,
  "status": "active",
  "test_clock": null,
  "transfer_data": null,
  "trial_end": null,
  "trial_settings": {
    "end_behavior": {
      "missing_payment_method": "create_invoice"
    }
  },
  "trial_start": null
}
*/

  String? id;
  String? object;
  String? application;
  String? applicationFeePercent;
  SubscriptionStripeSubscriptionObjAutomaticTax? automaticTax;
  int? billingCycleAnchor;
  String? billingCycleAnchorConfig;
  String? billingThresholds;
  String? cancelAt;
  bool? cancelAtPeriodEnd;
  String? canceledAt;
  SubscriptionStripeSubscriptionObjCancellationDetails? cancellationDetails;
  String? collectionMethod;
  int? created;
  String? currency;
  int? currentPeriodEnd;
  int? currentPeriodStart;
  String? customer;
  String? daysUntilDue;
  String? defaultPaymentMethod;
  String? defaultSource;
  List<dynamic>? defaultTaxRates;
  String? description;
  String? discount;
  List<dynamic>? discounts;
  String? endedAt;
  SubscriptionStripeSubscriptionObjInvoiceSettings? invoiceSettings;
  SubscriptionStripeSubscriptionObjItems? items;
  String? latestInvoice;
  bool? livemode;
  String? nextPendingInvoiceItemInvoice;
  String? onBehalfOf;
  String? pauseCollection;
  SubscriptionStripeSubscriptionObjPaymentSettings? paymentSettings;
  String? pendingInvoiceItemInterval;
  String? pendingSetupIntent;
  String? pendingUpdate;
  SubscriptionStripeSubscriptionObjPlan? plan;
  int? quantity;
  String? schedule;
  int? startDate;
  String? status;
  String? testClock;
  String? transferData;
  String? trialEnd;
  SubscriptionStripeSubscriptionObjTrialSettings? trialSettings;
  String? trialStart;

  SubscriptionStripeSubscriptionObj({
    this.id,
    this.object,
    this.application,
    this.applicationFeePercent,
    this.automaticTax,
    this.billingCycleAnchor,
    this.billingCycleAnchorConfig,
    this.billingThresholds,
    this.cancelAt,
    this.cancelAtPeriodEnd,
    this.canceledAt,
    this.cancellationDetails,
    this.collectionMethod,
    this.created,
    this.currency,
    this.currentPeriodEnd,
    this.currentPeriodStart,
    this.customer,
    this.daysUntilDue,
    this.defaultPaymentMethod,
    this.defaultSource,
    this.defaultTaxRates,
    this.description,
    this.discount,
    this.discounts,
    this.endedAt,
    this.invoiceSettings,
    this.items,
    this.latestInvoice,
    this.livemode,
    this.nextPendingInvoiceItemInvoice,
    this.onBehalfOf,
    this.pauseCollection,
    this.paymentSettings,
    this.pendingInvoiceItemInterval,
    this.pendingSetupIntent,
    this.pendingUpdate,
    this.plan,
    this.quantity,
    this.schedule,
    this.startDate,
    this.status,
    this.testClock,
    this.transferData,
    this.trialEnd,
    this.trialSettings,
    this.trialStart,
  });
  SubscriptionStripeSubscriptionObj.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    object = json['object']?.toString();
    application = json['application']?.toString();
    applicationFeePercent = json['application_fee_percent']?.toString();
    automaticTax = (json['automatic_tax'] != null) ? SubscriptionStripeSubscriptionObjAutomaticTax.fromJson(json['automatic_tax']) : null;
    billingCycleAnchor = json['billing_cycle_anchor']?.toInt();
    billingCycleAnchorConfig = json['billing_cycle_anchor_config']?.toString();
    billingThresholds = json['billing_thresholds']?.toString();
    cancelAt = json['cancel_at']?.toString();
    cancelAtPeriodEnd = json['cancel_at_period_end'];
    canceledAt = json['canceled_at']?.toString();
    cancellationDetails = (json['cancellation_details'] != null) ? SubscriptionStripeSubscriptionObjCancellationDetails.fromJson(json['cancellation_details']) : null;
    collectionMethod = json['collection_method']?.toString();
    created = json['created']?.toInt();
    currency = json['currency']?.toString();
    currentPeriodEnd = json['current_period_end']?.toInt();
    currentPeriodStart = json['current_period_start']?.toInt();
    customer = json['customer']?.toString();
    daysUntilDue = json['days_until_due']?.toString();
    defaultPaymentMethod = json['default_payment_method']?.toString();
    defaultSource = json['default_source']?.toString();
    description = json['description']?.toString();
    discount = json['discount']?.toString();
    endedAt = json['ended_at']?.toString();
    invoiceSettings = (json['invoice_settings'] != null) ? SubscriptionStripeSubscriptionObjInvoiceSettings.fromJson(json['invoice_settings']) : null;
    items = (json['items'] != null) ? SubscriptionStripeSubscriptionObjItems.fromJson(json['items']) : null;
    latestInvoice = json['latest_invoice']?.toString();
    livemode = json['livemode'];
    nextPendingInvoiceItemInvoice = json['next_pending_invoice_item_invoice']?.toString();
    onBehalfOf = json['on_behalf_of']?.toString();
    pauseCollection = json['pause_collection']?.toString();
    paymentSettings = (json['payment_settings'] != null) ? SubscriptionStripeSubscriptionObjPaymentSettings.fromJson(json['payment_settings']) : null;
    pendingInvoiceItemInterval = json['pending_invoice_item_interval']?.toString();
    pendingSetupIntent = json['pending_setup_intent']?.toString();
    pendingUpdate = json['pending_update']?.toString();
    plan = (json['plan'] != null) ? SubscriptionStripeSubscriptionObjPlan.fromJson(json['plan']) : null;
    quantity = json['quantity']?.toInt();
    schedule = json['schedule']?.toString();
    startDate = json['start_date']?.toInt();
    status = json['status']?.toString();
    testClock = json['test_clock']?.toString();
    transferData = json['transfer_data']?.toString();
    trialEnd = json['trial_end']?.toString();
    trialSettings = (json['trial_settings'] != null) ? SubscriptionStripeSubscriptionObjTrialSettings.fromJson(json['trial_settings']) : null;
    trialStart = json['trial_start']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['object'] = object;
    data['application'] = application;
    data['application_fee_percent'] = applicationFeePercent;
    if (automaticTax != null) {
      data['automatic_tax'] = automaticTax!.toJson();
    }
    data['billing_cycle_anchor'] = billingCycleAnchor;
    data['billing_cycle_anchor_config'] = billingCycleAnchorConfig;
    data['billing_thresholds'] = billingThresholds;
    data['cancel_at'] = cancelAt;
    data['cancel_at_period_end'] = cancelAtPeriodEnd;
    data['canceled_at'] = canceledAt;
    if (cancellationDetails != null) {
      data['cancellation_details'] = cancellationDetails!.toJson();
    }
    data['collection_method'] = collectionMethod;
    data['created'] = created;
    data['currency'] = currency;
    data['current_period_end'] = currentPeriodEnd;
    data['current_period_start'] = currentPeriodStart;
    data['customer'] = customer;
    data['days_until_due'] = daysUntilDue;
    data['default_payment_method'] = defaultPaymentMethod;
    data['default_source'] = defaultSource;
    data['description'] = description;
    data['discount'] = discount;
    data['ended_at'] = endedAt;
    if (invoiceSettings != null) {
    data['invoice_settings'] = invoiceSettings!.toJson();
    }
    if (items != null) {
    data['items'] = items!.toJson();
    }
    data['latest_invoice'] = latestInvoice;
    data['livemode'] = livemode;
    data['next_pending_invoice_item_invoice'] = nextPendingInvoiceItemInvoice;
    data['on_behalf_of'] = onBehalfOf;
    data['pause_collection'] = pauseCollection;
    if (paymentSettings != null) {
    data['payment_settings'] = paymentSettings!.toJson();
    }
    data['pending_invoice_item_interval'] = pendingInvoiceItemInterval;
    data['pending_setup_intent'] = pendingSetupIntent;
    data['pending_update'] = pendingUpdate;
    if (plan != null) {
    data['plan'] = plan!.toJson();
    }
    data['quantity'] = quantity;
    data['schedule'] = schedule;
    data['start_date'] = startDate;
    data['status'] = status;
    data['test_clock'] = testClock;
    data['transfer_data'] = transferData;
    data['trial_end'] = trialEnd;
    if (trialSettings != null) {
    data['trial_settings'] = trialSettings!.toJson();
    }
    data['trial_start'] = trialStart;
    return data;
  }
}

class Subscription {
/*
{
  "_id": "66c484111ff01279a87d2c74",
  "vendor": "66c43fc64b081215b0f1632f",
  "subscriptionType": "monthly",
  "plan": "66b2da0baa2e7f53d408f164",
  "startDate": "2024-08-20T11:54:55.000Z",
  "endDate": "2024-09-20T11:54:55.000Z",
  "stripeSubscriptionObj": {
    "id": "sub_1PpqeJKlUbZkAAt6XyRGwdzT",
    "object": "subscription",
    "application": null,
    "application_fee_percent": null,
    "automatic_tax": {
      "enabled": false,
      "liability": null
    },
    "billing_cycle_anchor": 1724154895,
    "billing_cycle_anchor_config": null,
    "billing_thresholds": null,
    "cancel_at": null,
    "cancel_at_period_end": false,
    "canceled_at": null,
    "cancellation_details": {
      "comment": null,
      "feedback": null,
      "reason": null
    },
    "collection_method": "charge_automatically",
    "created": 1724154895,
    "currency": "usd",
    "current_period_end": 1726833295,
    "current_period_start": 1724154895,
    "customer": "cus_QhEzxdafS8BO6e",
    "days_until_due": null,
    "default_payment_method": "card_1PpqXLKlUbZkAAt6nCCBCo5X",
    "default_source": null,
    "default_tax_rates": [
      null
    ],
    "description": null,
    "discount": null,
    "discounts": [
      null
    ],
    "ended_at": null,
    "invoice_settings": {
      "account_tax_ids": null,
      "issuer": {
        "type": "self"
      }
    },
    "items": {
      "object": "list",
      "data": [
        {
          "id": "si_QhF8uBNsPWK6iN",
          "object": "subscription_item",
          "billing_thresholds": null,
          "created": 1724154896,
          "discounts": [
            null
          ],
          "plan": {
            "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
            "object": "plan",
            "active": true,
            "aggregate_usage": null,
            "amount": 1000,
            "amount_decimal": "1000",
            "billing_scheme": "per_unit",
            "created": 1722997483,
            "currency": "usd",
            "interval": "month",
            "interval_count": 1,
            "livemode": false,
            "meter": null,
            "nickname": null,
            "product": "prod_QcE0CIBE3m3JgJ",
            "tiers_mode": null,
            "transform_usage": null,
            "trial_period_days": null,
            "usage_type": "licensed"
          },
          "price": {
            "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
            "object": "price",
            "active": true,
            "billing_scheme": "per_unit",
            "created": 1722997483,
            "currency": "usd",
            "custom_unit_amount": null,
            "livemode": false,
            "lookup_key": null,
            "nickname": null,
            "product": "prod_QcE0CIBE3m3JgJ",
            "recurring": {
              "aggregate_usage": null,
              "interval": "month",
              "interval_count": 1,
              "meter": null,
              "trial_period_days": null,
              "usage_type": "licensed"
            },
            "tax_behavior": "unspecified",
            "tiers_mode": null,
            "transform_quantity": null,
            "type": "recurring",
            "unit_amount": 1000,
            "unit_amount_decimal": "1000"
          },
          "quantity": 1,
          "subscription": "sub_1PpqeJKlUbZkAAt6XyRGwdzT",
          "tax_rates": [
            null
          ]
        }
      ],
      "has_more": false,
      "total_count": 1,
      "url": "/v1/subscription_items?subscription=sub_1PpqeJKlUbZkAAt6XyRGwdzT"
    },
    "latest_invoice": "in_1PpqeJKlUbZkAAt6SmgOEPgH",
    "livemode": false,
    "next_pending_invoice_item_invoice": null,
    "on_behalf_of": null,
    "pause_collection": null,
    "payment_settings": {
      "payment_method_options": null,
      "payment_method_types": null,
      "save_default_payment_method": "off"
    },
    "pending_invoice_item_interval": null,
    "pending_setup_intent": null,
    "pending_update": null,
    "plan": {
      "id": "price_1PkzYNKlUbZkAAt63bH4cqbH",
      "object": "plan",
      "active": true,
      "aggregate_usage": null,
      "amount": 1000,
      "amount_decimal": "1000",
      "billing_scheme": "per_unit",
      "created": 1722997483,
      "currency": "usd",
      "interval": "month",
      "interval_count": 1,
      "livemode": false,
      "meter": null,
      "nickname": null,
      "product": "prod_QcE0CIBE3m3JgJ",
      "tiers_mode": null,
      "transform_usage": null,
      "trial_period_days": null,
      "usage_type": "licensed"
    },
    "quantity": 1,
    "schedule": null,
    "start_date": 1724154895,
    "status": "active",
    "test_clock": null,
    "transfer_data": null,
    "trial_end": null,
    "trial_settings": {
      "end_behavior": {
        "missing_payment_method": "create_invoice"
      }
    },
    "trial_start": null
  },
  "isActive": true,
  "createdAt": "2024-08-20T11:54:57.588Z",
  "updatedAt": "2024-08-20T11:54:57.588Z",
  "__v": 0
}
*/

  String? Id;
  String? vendor;
  String? subscriptionType;
  String? plan;
  String? startDate;
  String? endDate;
  SubscriptionStripeSubscriptionObj? stripeSubscriptionObj;
  bool? isActive;
  String? createdAt;
  String? updatedAt;
  int? v;
  bool? isCancelled;

  Subscription({
    this.Id,
    this.vendor,
    this.subscriptionType,
    this.plan,
    this.startDate,
    this.endDate,
    this.stripeSubscriptionObj,
    this.isActive,
    this.createdAt,
    this.updatedAt,
    this.v,
    this.isCancelled,
  });
  Subscription.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    vendor = json['vendor']?.toString();
    subscriptionType = json['subscriptionType']?.toString();
    plan = json['plan']?.toString();
    startDate = json['startDate']?.toString();
    endDate = json['endDate']?.toString();
    stripeSubscriptionObj = (json['stripeSubscriptionObj'] != null) ? SubscriptionStripeSubscriptionObj.fromJson(json['stripeSubscriptionObj']) : null;
    isActive = json['isActive'];
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    isCancelled = json['isCancelled'];
    v = json['__v']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['vendor'] = vendor;
    data['subscriptionType'] = subscriptionType;
    data['plan'] = plan;
    data['startDate'] = startDate;
    data['endDate'] = endDate;
    if (stripeSubscriptionObj != null) {
      data['stripeSubscriptionObj'] = stripeSubscriptionObj!.toJson();
    }
    data['isActive'] = isActive;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['isCancelled'] = isCancelled;
    data['__v'] = v;
    return data;
  }
}
